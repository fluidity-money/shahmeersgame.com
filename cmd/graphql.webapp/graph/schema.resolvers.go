package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"log/slog"
	"encoding/hex"
	"time"

	"golang.org/x/crypto/sha3"

	ethCommon "github.com/ethereum/go-ethereum/common"

	"github.com/fluidity-money/shahmeersgame.com/cmd/graphql.webapp/graph/model"
)

// ExplainIdea is the resolver for the explainIdea field.
func (r *mutationResolver) ExplainIdea(ctx context.Context, desc string, submitter string) (bool, error) {
	if !ethCommon.IsHexAddress(submitter) {
		return false, fmt.Errorf("not address")
	}
	b := sha3.Sum256([]byte(desc))
	h := hex.EncodeToString(b[:])
	_, err := r.Db.Exec(`
INSERT INTO shahmeersgame_ideas_1 (creator, desc_, hashed) VALUES ($1, $2, $3)`,
		submitter,
		desc,
		h,
	)
	if err != nil {
		slog.Error("Inserting to ideas",
			"submitter", submitter,
			"desc", desc,
			"hash", h,
			"err", err,
		)
		return false, fmt.Errorf("inserting: %v", err)
	}
	return true, nil
}

// Ideas is the resolver for the ideas field.
func (r *queryResolver) Ideas(ctx context.Context) ([]*model.Idea, error) {
	rows, err := r.Db.Query(`
SELECT created_by, creator, desc_, hashed FROM shahmeersgame_ideas_1`,
	)
	if err != nil {
		slog.Error("Reading ideas", "err", err)
		return nil, fmt.Errorf("request ideas: %v", err)
	}
	defer rows.Close()
	var ideas []*model.Idea
	for rows.Next() {
		idea := new(model.Idea)
		var createdBy time.Time
		if err := rows.Scan(&createdBy, &idea.Submitter, &idea.Desc, &idea.Hash); err != nil {
			slog.Error("Scanning ideas", "err", err)
			return nil, fmt.Errorf("error reading ideas: %v", err)
		}
		idea.Time = int32(createdBy.Unix())
		ideas = append(ideas, idea)
	}
	return ideas, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
